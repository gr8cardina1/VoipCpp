//
// h235_t.cxx
//
// Code automatically generated by asnparse.
//

namespace H235 {

//
// SIGNED
//

template < typename ToBeSigned > SIGNED < ToBeSigned > :: SIGNED ( Asn :: istream & is ) : Asn :: Sequence ( is, 0, false, 0 ), m_toBeSigned ( is ), m_algorithmOID ( is ), m_paramS ( is ), m_signature ( is, Asn :: unconstrained, 0, std :: numeric_limits < unsigned > :: max ( ) ) {
}

template < typename ToBeSigned > SIGNED < ToBeSigned > :: SIGNED ( ) : Asn :: Sequence ( 0, false, 0 ) { }

template < typename ToBeSigned > void SIGNED < ToBeSigned > :: encode ( Asn :: ostream & os ) const {
	preambleEncode ( os );
	m_toBeSigned.encode ( os );
	m_algorithmOID.encode ( os );
	m_paramS.encode ( os );
	m_signature.encode ( os );
}

template < typename ToBeSigned > void SIGNED < ToBeSigned > :: printOn ( std :: ostream & os ) const {
	int indent = int ( os.precision ( ) + 2 );
	os << "{\n";
	os << std :: setw ( indent + 13 ) << "toBeSigned = " << std :: setprecision ( indent ) << m_toBeSigned << '\n';
	os << std :: setw ( indent + 15 ) << "algorithmOID = " << std :: setprecision ( indent ) << m_algorithmOID << '\n';
	os << std :: setw ( indent + 9 ) << "paramS = " << std :: setprecision ( indent ) << m_paramS << '\n';
	os << std :: setw ( indent + 12 ) << "signature = " << std :: setprecision ( indent ) << m_signature << '\n';
	os << std :: setw ( indent - 1 ) << '}';
}

template < typename ToBeSigned > SIGNED < ToBeSigned > * SIGNED < ToBeSigned > :: clone ( ) const {
	return new SIGNED ( * this );
}

//
// ENCRYPTED
//

template < typename ToBeEncrypted > ENCRYPTED < ToBeEncrypted > :: ENCRYPTED ( Asn :: istream & is ) : Asn :: Sequence ( is, 0, false, 0 ), m_algorithmOID ( is ), m_paramS ( is ), m_encryptedData ( is, Asn :: unconstrained, 0, std :: numeric_limits < unsigned > :: max ( ) ) {
}

template < typename ToBeEncrypted > ENCRYPTED < ToBeEncrypted > :: ENCRYPTED ( ) : Asn :: Sequence ( 0, false, 0 ) { }

template < typename ToBeEncrypted > void ENCRYPTED < ToBeEncrypted > :: encode ( Asn :: ostream & os ) const {
	preambleEncode ( os );
	m_algorithmOID.encode ( os );
	m_paramS.encode ( os );
	m_encryptedData.encode ( os );
}

template < typename ToBeEncrypted > void ENCRYPTED < ToBeEncrypted > :: printOn ( std :: ostream & os ) const {
	int indent = int ( os.precision ( ) + 2 );
	os << "{\n";
	os << std :: setw ( indent + 15 ) << "algorithmOID = " << std :: setprecision ( indent ) << m_algorithmOID << '\n';
	os << std :: setw ( indent + 9 ) << "paramS = " << std :: setprecision ( indent ) << m_paramS << '\n';
	os << std :: setw ( indent + 16 ) << "encryptedData = " << std :: setprecision ( indent ) << m_encryptedData << '\n';
	os << std :: setw ( indent - 1 ) << '}';
}

template < typename ToBeEncrypted > ENCRYPTED < ToBeEncrypted > * ENCRYPTED < ToBeEncrypted > :: clone ( ) const {
	return new ENCRYPTED ( * this );
}

//
// HASHED
//

template < typename ToBeHashed > HASHED < ToBeHashed > :: HASHED ( Asn :: istream & is ) : Asn :: Sequence ( is, 0, false, 0 ), m_algorithmOID ( is ), m_paramS ( is ), m_hash ( is, Asn :: unconstrained, 0, std :: numeric_limits < unsigned > :: max ( ) ) {
}

template < typename ToBeHashed > HASHED < ToBeHashed > :: HASHED ( ) : Asn :: Sequence ( 0, false, 0 ) { }

template < typename ToBeHashed > void HASHED < ToBeHashed > :: encode ( Asn :: ostream & os ) const {
	preambleEncode ( os );
	m_algorithmOID.encode ( os );
	m_paramS.encode ( os );
	m_hash.encode ( os );
}

template < typename ToBeHashed > void HASHED < ToBeHashed > :: printOn ( std :: ostream & os ) const {
	int indent = int ( os.precision ( ) + 2 );
	os << "{\n";
	os << std :: setw ( indent + 15 ) << "algorithmOID = " << std :: setprecision ( indent ) << m_algorithmOID << '\n';
	os << std :: setw ( indent + 9 ) << "paramS = " << std :: setprecision ( indent ) << m_paramS << '\n';
	os << std :: setw ( indent + 7 ) << "hash = " << std :: setprecision ( indent ) << m_hash << '\n';
	os << std :: setw ( indent - 1 ) << '}';
}

template < typename ToBeHashed > HASHED < ToBeHashed > * HASHED < ToBeHashed > :: clone ( ) const {
	return new HASHED ( * this );
}

}


// End of h235_t.cxx
