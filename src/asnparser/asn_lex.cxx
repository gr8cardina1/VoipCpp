#line 2 "asn_lex.cxx"

#if defined(__FreeBSD__)
#include <sys/cdefs.h>
#else
#define __unused
#define __dead2
#endif

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) __unused;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] )) __dead2;

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 139
#define YY_END_OF_BUFFER 140
static yyconst short int yy_accept[719] =
    {   0,
        0,    0,    0,    0,  140,  138,  136,  137,  129,  138,
      138,  127,  113,  114,  121,  119,  123,  120,  124,  122,
      131,  125,  118,  115,  126,  116,  108,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  111,  112,  128,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  109,  117,  110,  107,  106,  107,    0,  130,  134,
      133,  104,  131,    0,    0,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,   12,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,

      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
       53,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,    0,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  105,    0,    0,
      134,    0,  133,    1,  135,  135,    4,    5,  135,  135,
      135,    9,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,   23,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,   45,   46,  135,  135,  135,  135,  135,  135,   55,

      135,  135,  135,  135,  135,  135,  135,   62,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,    0,
      130,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,   30,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,   49,  135,  135,  135,  135,  135,  135,  135,  135,
       60,  135,  135,   63,  135,  135,  135,  135,   67,  135,

       69,   70,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,   79,  132,  132,  132,  132,    0,  132,  132,
      132,  132,  132,   84,  132,  132,  135,  135,  135,  135,
      135,    8,  135,  135,  135,  135,   15,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
       29,  135,  135,  135,  135,  135,  135,  135,  100,  135,
      135,  135,  135,   44,  135,  135,  135,  135,   52,  135,
        0,  135,  135,  135,  135,  135,  135,  135,  135,  135,
        0,    0,  135,   71,  135,  135,  135,  135,   76,  135,
      135,  135,  132,   83,  132,  132,  132,  132,  132,  132,

        0,  132,   85,  132,    2,  135,   88,  135,  135,  135,
      135,  135,   14,  135,  135,  135,  135,  135,  101,  135,
      135,  135,  135,   25,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,    0,  135,
      135,   51,  135,  135,  135,  135,  135,  135,  135,   89,
       64,   65,  135,  135,  135,  135,   72,  135,  135,  135,
      135,  135,  135,  132,  132,  132,  132,   82,  132,  132,
      132,  132,   80,    0,  135,  135,  135,  135,   11,  135,
      135,  135,   19,   20,  135,  135,  135,  135,  135,  135,
       27,  135,  135,  135,  135,  135,  135,   38,  135,  135,

       41,  135,  135,  135,  135,  135,    0,  135,  135,   57,
       59,  135,  135,  135,  135,  135,  135,  135,  135,   75,
      135,  135,  135,  135,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  135,  135,  135,  135,  135,  135,  135,
      135,  135,   22,  135,  135,   26,   28,  135,  135,  135,
      135,  135,   37,   39,   40,  135,  135,  135,   48,  135,
      135,   54,  135,  135,  135,   61,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  132,  132,  132,  132,   96,
       95,  132,  132,  132,    0,  135,    7,   10,   13,   16,
      135,  135,  135,  135,  135,  135,  135,  135,   34,  135,

      135,  135,  135,  135,  135,  135,  135,   99,   66,   87,
      135,  135,   73,  135,  103,  135,  135,  132,  132,   94,
      132,   90,  132,  132,  135,  135,   17,  135,  135,  135,
      102,   24,  135,  135,  135,   36,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,   97,   81,
      132,   91,   92,  135,    6,   18,   21,   98,  135,  135,
      135,  135,  135,  135,  135,   86,  135,  135,  135,  135,
      135,  135,  135,  132,  135,  135,  135,  135,   42,   43,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  132,
      135,   32,  135,   33,  135,   50,   56,  135,  135,   68,

      135,  135,   78,  132,  135,  135,   47,  135,  135,  135,
       77,   93,    3,   31,   58,   35,   74,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    6,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   16,
       16,   18,   19,   20,   16,   16,   16,   21,   22,   23,
       24,   25,    1,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,    1,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   66,   67,   68,   69,
       70,   71,   66,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   83,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[84] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    1,    1,    2,    2,    2,    2,    2,
        1,    1,    1,    1,    1,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        1,    1,    1
    } ;

static yyconst short int yy_base[726] =
    {   0,
        0,    0,   81,   82, 1460, 1461, 1461, 1461, 1461, 1454,
       69, 1461, 1461, 1461, 1461, 1461, 1461, 1445, 1461, 1461,
       70, 1436, 1461, 1461, 1461, 1461, 1461,  137,  139,  147,
      138,  143,  145,  140, 1443,  178,  141,  151,  174,  181,
      142,  196,  194,  182,  183,  200, 1461, 1461, 1461, 1442,
      110,  173,  144,  186,  154,  202,  207,  184,   80,  187,
      217, 1461, 1461, 1461, 1461, 1461, 1441, 1448, 1447, 1438,
     1437, 1461,  245, 1425, 1435, 1434,   79,  220,  219,  112,
      224,  221,  223,  226,  227,  233, 1433,  257,  258,  237,
      246,  262,  266,  268,  267,  241,  239,  270,  273,  275,

      274,  288,  280,  282,  286,  289,  281,  287,  294,  290,
     1432,  291,  296,  302,  307,  309,  316,  310,  109,  318,
      311,  333,  326,  334,  312,  315,  328,  339,  327,  345,
      344,  347, 1431, 1430,  351,  352,  353,  356,  354,  358,
      357,  359,  362,  360,  363,  364,  371, 1461, 1437, 1428,
     1427, 1426, 1425, 1461,  365,  366, 1424, 1423,  367,  372,
      373, 1422,  375,  374,  377,  381,  382,  387,  390,  411,
      378,  424, 1421,  426,  402,  427,  429,  430,  405,  432,
      386,  385,  431,  435,  436,  440,  438,  439,  441,  389,
      447, 1420,  449,  452,  450,  451,  453,  455,  460, 1419,

      468,  469,  467,  470,  479,  474,  476, 1418,  477,  480,
      481,  484,  486,  487,  485,  488,  489,  490,  493,  491,
      494,  496,  498,  497,  508,  511,  505,  509,  512,  515,
     1417,  516,  522,  525,  527,  529,  534,  531,  533, 1424,
     1423,  536,  535,  537,  543,  541,  544,  539,  540,  542,
      559,  546,  548,  547,  549,  572,  573,  553,  585,  555,
      588,  589,  590,  591,  592,  595, 1414,  550,  552,  554,
      596,  597,  601,  604,  598,  607,  605,  388,  611,  608,
      610, 1413,  614,  617,  616,  620, 1412,  624,  627,  626,
     1411,  628,  634, 1410,  630,  631,  637,  644, 1409, 1408,

     1407, 1406,  645,  647,  646,  650,  655,  653,  654,  656,
      657,  663, 1405,  661,  660,  662,  666,  667,  665,  671,
      675, 1404,  677, 1403,  669,  676,  679,  678,  683,  681,
      682, 1402,  684,  685,  686,  698, 1401,  691,  688,  695,
      722,  703,  727,  704,  700,  730,  731,  734,  735,  736,
     1400,  693,  689,  694,  738,  739,  742,  745, 1399,  746,
      747,  748,  751, 1398, 1397,  752,  754,  756, 1396,  757,
      759,  766,  767,  769,  770,  771,  772,  776,  777,  778,
      779,  783,  782, 1395,  785,  786,  787,  790, 1394,  792,
      791,  794,  795, 1393,  799,  797,  801,  802,  808,  809,

      810,  816, 1392, 1391, 1390,  811, 1389,  815,  820,  818,
      819,  821, 1388,  822,  824,  826,  828,  831, 1387,  833,
      825,  832,  836, 1386,  835,  823,  868,  834,  839,  844,
      860,  869,  871,  872,  873,  875,  876,  877,  878,  880,
      881, 1385,  883,  884,  886,  887,  892,  893,  898, 1384,
     1383, 1382,  895,  901,  899,  902, 1381,  904,  907,  910,
      913,  912,  915,  917,  922,  918,  923, 1380,  921,  924,
      925,  926, 1379,  929,  931,  932,  928,  933, 1378,  930,
      935,  934, 1377, 1376,  944,  940,  941,  952,  943,  945,
     1375,  954,  951,  959,  942,  972,  957, 1374,  977,  984,

     1373,  980,  946,  987,  988,  992,  993,  995,  997, 1372,
     1371,  999, 1001, 1000,  949, 1004, 1010, 1006, 1008, 1370,
     1011, 1012, 1013, 1019, 1021, 1023, 1025, 1029, 1031, 1027,
     1032, 1035, 1034, 1369, 1036, 1040, 1039, 1037, 1041, 1042,
     1043, 1044, 1368, 1048, 1045, 1367, 1366, 1046, 1047, 1049,
     1050, 1052, 1365, 1364, 1363, 1059, 1054, 1057, 1362, 1060,
     1061, 1361, 1072, 1064, 1065, 1360, 1067, 1073, 1088, 1062,
     1093, 1085, 1095, 1096, 1097, 1098, 1101, 1102, 1103, 1359,
     1358, 1104, 1105, 1106, 1108, 1109, 1357, 1356, 1355, 1111,
     1116, 1120, 1122, 1124, 1119, 1125, 1126, 1129, 1354, 1130,

     1131, 1133, 1132, 1135, 1138, 1144, 1141, 1353, 1352, 1351,
     1145, 1148, 1350, 1151, 1342, 1152, 1155, 1156, 1157, 1341,
     1159, 1340, 1162, 1164, 1177, 1165, 1339, 1169, 1172, 1175,
     1338, 1337, 1176, 1179, 1180, 1336, 1181, 1182, 1190, 1187,
     1193, 1196, 1189, 1198, 1191, 1195, 1199, 1197, 1334, 1333,
     1200, 1332, 1331, 1206, 1330, 1329, 1325, 1318, 1201, 1208,
     1205, 1221, 1212, 1222, 1223, 1314, 1227, 1224, 1234, 1225,
     1229, 1235, 1236, 1231, 1237, 1240, 1242, 1245, 1313, 1312,
     1247, 1246, 1251, 1254, 1255, 1259, 1263, 1264, 1266, 1265,
     1268, 1311, 1267, 1310, 1269, 1308, 1305, 1271, 1273, 1304,

     1272, 1274, 1303, 1275, 1284, 1278, 1302, 1285, 1286, 1293,
     1301, 1300, 1299, 1298, 1297,  953,  690, 1461, 1356, 1358,
      562,  408,  160,   89, 1360
    } ;

static yyconst short int yy_def[726] =
    {   0,
      718,    1,  719,  719,  718,  718,  718,  718,  718,  720,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  718,  718,  718,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  718,  718,  718,  718,  718,  718,  720,  718,  723,
      724,  718,  718,  718,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,

      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  718,  725,  723,
      723,  724,  724,  718,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,

      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  725,
      718,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,

      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  722,  722,  722,  722,  722,  722,  722,  722,

      722,  722,  722,  722,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,

      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,

      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  722,  722,  722,
      722,  722,  722,  722,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  722,  722,
      722,  722,  722,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  722,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  722,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,

      721,  721,  721,  722,  721,  721,  721,  721,  721,  721,
      721,  722,  721,  721,  721,  721,  721,    0,  718,  718,
      718,  718,  718,  718,  718
    } ;

static yyconst short int yy_nxt[1545] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   21,   21,   21,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   35,   35,   35,   37,   38,
       39,   40,   35,   41,   42,   43,   44,   45,   46,   35,
       35,   35,   47,   48,   49,    6,   50,   50,   50,   51,
       52,   50,   50,   50,   53,   50,   50,   54,   55,   56,
       50,   57,   58,   59,   50,   60,   61,   50,   50,   50,
       62,   63,   64,   66,   66,   73,   73,   73,   73,   73,
      153,   75,  133,   67,   67,   70,   70,   70,   70,   70,

       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   75,  133,  155,   75,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   75,
       75,   75,   75,   75,   75,   75,  133,   75,  145,   75,
      209,  151,  158,   75,   77,   78,  133,  104,   91,   83,
      135,   95,  117,   84,   79,  105,   80,   85,   81,   86,
       88,   92,   93,   82,   89,  133,   75,   90,   96,   87,
       75,  106,   94,   75,   75,   75,  133,  107,  133,  133,

       97,  109,  110,  137,   99,  111,   75,  100,   75,  130,
      113,   98,   75,  122,  133,  112,  101,  102,  114,  133,
      123,  127,  103,  139,  115,  108,  118,  128,  140,  133,
      119,   75,   75,   75,  132,   75,   75,  124,   75,   75,
      136,  120,  138,  146,  125,   75,  121,  131,  156,   75,
      129,   75,  116,   75,  126,  161,  157,  144,   75,  141,
       73,   73,   73,   73,   73,  159,  160,  143,  163,   75,
       75,  162,  142,  164,   75,  168,  169,  170,   75,   75,
       75,  180,   75,  165,  167,   75,   75,   75,  147,  172,
      171,  183,   75,   75,   75,  173,  176,  166,   75,   75,

       75,   75,   75,   75,  179,  184,   75,  181,   75,  177,
      191,  174,  175,  178,   75,  185,  186,  187,  195,   75,
      190,   75,   75,   75,   75,  193,  182,   75,   75,  197,
       75,  192,  188,  189,  194,  198,  199,  202,   75,   75,
       75,  203,  205,  200,  210,   75,   75,  206,  201,  213,
      212,   75,  207,  217,  196,  208,   75,   75,  214,   75,
      215,  211,  219,  133,  133,  133,  133,  220,  133,  133,
      133,  133,  133,  204,  133,  133,  133,   75,   75,   75,
      216,  218,  222,  133,   75,   75,   75,   75,  223,   75,
       75,  221,  226,   75,   75,  242,  244,   75,   75,   75,

       75,   75,   75,  224,  245,  363,  258,  247,  278,  134,
      243,  249,  246,  229,   75,  251,  225,   75,  235,  248,
      250,  227,  228,   75,  230,  232,  252,  231,  253,  233,
      238,  236,  234,  237,  254,  239,   75,  255,   75,   75,
      261,   75,   75,   75,   75,  256,  268,   75,   75,  266,
       75,   75,   75,   75,  259,  269,  260,  262,  257,   75,
      265,   75,   75,   75,   75,   75,  263,   75,  275,  264,
      267,  277,   75,  272,  271,  270,  273,  274,  281,   75,
       75,   75,   75,  284,  276,  285,   75,  282,   75,   75,
      279,   75,   75,   75,  286,  280,   75,   75,   75,   75,

       75,   75,   75,   75,  292,   75,   75,  294,   75,   75,
       75,  283,  287,  288,  289,  296,  291,  133,  301,  302,
       75,  133,  293,   75,  133,  295,  300,  133,  133,  297,
      298,  299,  310,  304,  133,  305,  307,  133,  290,  133,
      306,  133,  309,  133,  313,  133,  133,   75,   75,   75,
      303,   75,   75,   75,   75,   75,   75,  311,   75,   75,
       75,   75,   75,   76,   75,   75,   75,   75,  335,  308,
      334,   75,  312,  319,  317,  327,  314,  330,  328,  331,
      316,  329,  315,  332,   75,   75,  322,  336,  338,  321,
      337,  320,  339,  323,  324,  340,  343,   75,  345,  342,

       75,   75,   75,   75,   75,  325,  326,   75,   75,   75,
       75,  341,  333,   75,  344,  353,   75,   75,  346,   75,
       75,  352,   75,   75,  348,  351,   75,  354,   75,   75,
      347,  356,   75,  360,  349,  350,   75,  361,   75,   75,
       75,  355,   75,   75,  357,  368,   75,  359,  362,   75,
      358,  364,  365,  373,  372,  366,   75,   75,   75,   75,
      370,  369,   75,  379,  376,   75,   75,   75,   75,   75,
      378,  375,  133,  133,  133,   75,  377,  133,  133,  133,
      386,  133,  390,  133,  389,  367,  384,  133,  133,  133,
       75,   75,  385,   75,   75,   75,   75,   75,   75,  374,

       75,   75,   75,   75,  406,   75,   75,   75,  409,  408,
       75,  411,   75,  388,  412,   75,   75,  380,  383,  387,
      392,  393,  396,  397,  405,  398,  391,  407,  413,  403,
      414,  415,  416,  421,   75,  395,  404,  399,  394,   75,
      419,  422,   75,   75,  400,  402,   75,   75,   75,  428,
       75,   75,  417,  429,   75,  410,  418,   75,   75,   75,
       75,  420,  425,   75,   75,  430,   75,  432,   75,   75,
      438,   75,  431,  423,  434,  427,  424,  436,   75,   75,
      426,   75,   75,   75,   75,  435,  440,  433,   75,   75,
       75,   75,  437,  444,   75,   75,  443,   75,   75,   75,

      448,  442,   75,   75,   75,  445,   75,  133,  451,  133,
      449,  133,  446,  133,  133,  457,  450,  455,  441,  461,
      133,  133,  133,   75,  454,  447,  452,   75,  133,  458,
       75,   75,   75,   75,   75,   75,   75,   75,   75,  475,
       75,  476,  456,   75,   75,   75,   75,   75,   75,  453,
      482,   75,  481,  464,  459,  487,   75,  484,  479,  467,
      463,  460,  489,  465,  462,  477,  480,  491,  469,  490,
      466,  483,   75,  468,  486,  488,  485,  470,  473,  471,
       75,   75,  478,   75,   75,   75,  472,   75,   75,   75,
       75,  496,   75,   75,  492,   75,   75,  494,   75,   75,

      493,  500,  499,  497,   75,   75,  502,   75,  495,  508,
       75,   75,  504,   75,   75,  498,   75,  511,  501,   75,
      505,  503,   75,  509,   75,   75,  514,   75,  517,  133,
      133,  510,  513,  133,  133,  133,  133,  133,  133,  506,
       75,  133,   75,   75,   75,   75,   75,   75,  519,  512,
      522,  516,   75,   75,   75,   75,   75,   75,   75,  515,
      538,   75,  536,   75,   75,   75,   75,  520,  540,   75,
      543,   75,  523,  525,  539,  524,  534,  535,  541,  518,
      530,  528,  521,  526,   75,  542,  544,  527,  545,   75,
      546,  547,   75,  531,  529,  548,   75,  532,  533,   75,

       75,  537,  553,  550,   75,   75,  552,   75,  556,   75,
      551,   75,   75,   75,  555,  549,   75,  567,   75,  557,
       75,  554,   75,   75,   75,   75,  558,  559,  563,  565,
      566,   75,  562,  133,  571,  133,  560,  133,  561,  133,
      569,  133,  573,  133,  133,  568,  133,  133,   75,   75,
      570,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,  575,   75,  564,   75,  572,  587,   75,
      586,   75,   75,   75,   75,  595,   75,   75,  593,   75,
      589,  591,  600,  592,   75,   75,  590,  577,  603,  579,
      574,  580,  594,  581,  576,  608,  578,   75,  582,  583,

       75,  588,  584,  610,  601,   75,  606,   75,   75,   75,
      133,  605,  599,  133,  133,  133,  133,  133,  133,  596,
       75,   75,  598,   75,  607,  602,  597,  611,   75,  609,
      613,   75,   75,  604,   75,  612,   75,   75,   75,  615,
      616,   75,   75,   75,   75,   75,  628,   75,  632,  626,
       75,  614,  625,   75,  631,  627,   75,   75,  618,  629,
       75,  619,  630,   75,   75,  637,  639,   75,  133,  133,
      617,  133,  624,  636,  133,  621,  133,   75,  623,  641,
      620,   75,  622,  642,   75,  643,  634,   75,   75,   75,
      644,   75,   75,   75,   75,  646,  633,  638,  656,   75,

      635,   75,   75,   75,  655,   75,  640,   75,   75,   75,
       75,   75,  133,   75,  658,  649,  657,   75,   75,  645,
       75,  662,  652,  666,   75,  647,  648,  654,  650,  664,
      667,  651,  669,   75,   75,   75,   75,   75,  660,   75,
      659,   75,  653,  133,  661,  675,   75,   75,   75,   75,
      663,  665,   75,  677,   75,  670,  681,   75,   75,   75,
      679,  673,  668,   75,  674,  685,   75,   75,  671,  676,
      672,   75,  683,  678,  680,   75,   75,  133,   75,   75,
       75,   75,  691,   75,   75,   75,   75,  133,  690,  699,
       75,  682,  695,  686,  705,  684,   75,   75,   75,  688,

      687,  697,  692,  709,  689,   75,  693,  694,  696,   75,
       75,   75,  133,   75,   75,   75,   75,   75,  698,  707,
       75,  700,   75,   75,   75,   75,   75,  701,  703,  716,
       75,  704,  702,  713,  706,  712,  711,   75,  714,  708,
      710,   75,   75,  133,  133,  133,  133,  715,   75,   75,
       75,   75,  133,  133,   75,  717,   65,   65,   68,   68,
      240,  240,   75,   75,   75,   75,   75,   75,   75,   75,
      133,  133,   75,   75,   75,   75,   75,   75,   75,   75,
       75,  585,   75,   75,   75,   75,   75,   75,   75,   75,
       75,  133,  133,   75,   75,   75,   75,  507,   75,   75,

       75,   75,   75,  474,  133,  133,   75,   75,   75,  439,
       75,   75,   75,   75,   75,  133,  401,   75,  382,   75,
      381,   75,   75,   75,  371,   75,   75,  149,  241,  318,
       75,   75,   75,   75,   75,   75,   75,  152,  152,  150,
      150,  241,  133,  133,   75,   75,   75,   75,  154,  152,
      150,  149,   69,  148,  133,   75,   74,   72,   69,  718,
        5,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718
    } ;

static yyconst short int yy_chk[1545] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    4,   21,   21,   21,   21,   21,
      724,   77,   59,    3,    4,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,  119,   51,   77,   80,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   28,
       31,   29,   34,   37,   41,   32,   53,   33,   59,   30,
      119,  723,   80,   38,   28,   28,   55,   37,   31,   29,
       51,   33,   41,   29,   28,   37,   28,   29,   28,   29,
       30,   32,   32,   28,   30,   52,   39,   30,   33,   29,
       36,   38,   32,   40,   44,   45,   58,   38,   54,   60,

       34,   39,   39,   53,   36,   39,   43,   36,   42,   45,
       40,   34,   46,   43,   56,   39,   36,   36,   40,   57,
       43,   44,   36,   55,   40,   38,   42,   44,   55,   61,
       42,   79,   78,   82,   46,   83,   81,   43,   84,   85,
       52,   42,   54,   60,   43,   86,   42,   45,   78,   90,
       44,   97,   40,   96,   43,   83,   79,   58,   91,   56,
       73,   73,   73,   73,   73,   81,   82,   57,   85,   88,
       89,   84,   56,   86,   92,   90,   90,   91,   93,   95,
       94,   96,   98,   88,   89,   99,  101,  100,   61,   92,
       91,   99,  103,  107,  104,   93,   94,   88,  105,  108,

      102,  106,  110,  112,   95,  100,  109,   97,  113,   94,
      104,   93,   93,   94,  114,  101,  102,  102,  107,  115,
      103,  116,  118,  121,  125,  105,   98,  126,  117,  109,
      120,  104,  102,  102,  106,  110,  112,  115,  123,  129,
      127,  115,  117,  113,  120,  122,  124,  117,  114,  122,
      121,  128,  118,  125,  108,  118,  131,  130,  123,  132,
      124,  120,  127,  135,  136,  137,  139,  128,  138,  141,
      140,  142,  144,  116,  143,  145,  146,  155,  156,  159,
      124,  126,  130,  147,  160,  161,  164,  163,  130,  165,
      171,  129,  132,  166,  167,  155,  156,  182,  181,  168,

      278,  190,  169,  131,  159,  278,  171,  161,  190,  722,
      155,  164,  160,  137,  175,  166,  131,  179,  143,  163,
      165,  135,  136,  170,  138,  140,  167,  139,  168,  141,
      146,  144,  142,  145,  169,  147,  172,  170,  174,  176,
      175,  177,  178,  183,  180,  170,  181,  184,  185,  179,
      187,  188,  186,  189,  172,  182,  174,  176,  170,  191,
      178,  193,  195,  196,  194,  197,  177,  198,  187,  177,
      180,  189,  199,  185,  184,  183,  185,  186,  194,  203,
      201,  202,  204,  197,  188,  198,  206,  195,  207,  209,
      191,  205,  210,  211,  199,  193,  212,  215,  213,  214,

      216,  217,  218,  220,  206,  219,  221,  209,  222,  224,
      223,  196,  201,  202,  203,  211,  205,  227,  216,  217,
      225,  228,  207,  226,  229,  210,  215,  230,  232,  212,
      213,  214,  223,  219,  233,  219,  220,  234,  204,  235,
      219,  236,  222,  238,  226,  239,  237,  243,  242,  244,
      218,  248,  249,  246,  250,  245,  247,  224,  252,  254,
      253,  255,  268,  721,  269,  258,  270,  260,  250,  221,
      249,  251,  225,  232,  230,  242,  227,  245,  243,  246,
      229,  244,  228,  247,  256,  257,  235,  251,  253,  234,
      252,  233,  254,  236,  237,  255,  258,  259,  260,  257,

      261,  262,  263,  264,  265,  238,  239,  266,  271,  272,
      275,  256,  248,  273,  259,  269,  274,  277,  261,  276,
      280,  268,  281,  279,  263,  266,  283,  270,  285,  284,
      262,  272,  286,  276,  264,  265,  288,  277,  290,  289,
      292,  271,  295,  296,  273,  284,  293,  275,  277,  297,
      274,  279,  280,  289,  288,  281,  298,  303,  305,  304,
      286,  285,  306,  297,  293,  308,  309,  307,  310,  311,
      296,  292,  315,  314,  316,  312,  295,  319,  317,  318,
      306,  325,  310,  320,  309,  283,  304,  321,  326,  323,
      328,  327,  305,  330,  331,  329,  333,  334,  335,  290,

      339,  353,  717,  338,  328,  352,  354,  340,  331,  330,
      336,  334,  345,  308,  335,  342,  344,  298,  303,  307,
      312,  314,  317,  318,  327,  319,  311,  329,  336,  325,
      338,  339,  340,  344,  341,  316,  326,  320,  315,  343,
      342,  345,  346,  347,  321,  323,  348,  349,  350,  352,
      355,  356,  341,  353,  357,  333,  341,  358,  360,  361,
      362,  343,  348,  363,  366,  354,  367,  356,  368,  370,
      363,  371,  355,  346,  358,  350,  347,  361,  372,  373,
      349,  374,  375,  376,  377,  360,  366,  357,  378,  379,
      380,  381,  362,  371,  383,  382,  370,  385,  386,  387,

      375,  368,  388,  391,  390,  372,  392,  393,  378,  396,
      376,  395,  373,  397,  398,  385,  377,  382,  367,  390,
      399,  400,  401,  406,  381,  374,  379,  408,  402,  386,
      410,  411,  409,  412,  414,  426,  415,  421,  416,  406,
      417,  408,  383,  418,  422,  420,  428,  425,  423,  380,
      415,  429,  414,  393,  387,  421,  430,  417,  411,  397,
      392,  388,  423,  395,  391,  409,  412,  426,  399,  425,
      396,  416,  431,  398,  420,  422,  418,  400,  402,  401,
      427,  432,  410,  433,  434,  435,  401,  436,  437,  438,
      439,  431,  440,  441,  427,  443,  444,  429,  445,  446,

      428,  435,  434,  432,  447,  448,  437,  453,  430,  443,
      449,  455,  439,  454,  456,  433,  458,  446,  436,  459,
      440,  438,  460,  444,  462,  461,  449,  463,  455,  464,
      466,  445,  448,  469,  465,  467,  470,  471,  472,  441,
      477,  474,  480,  475,  476,  478,  482,  481,  458,  447,
      461,  454,  486,  487,  495,  489,  485,  490,  503,  453,
      480,  515,  477,  493,  488,  716,  492,  459,  482,  497,
      487,  494,  462,  464,  481,  463,  475,  476,  485,  456,
      470,  467,  460,  465,  496,  486,  488,  466,  489,  499,
      490,  492,  502,  471,  469,  493,  500,  472,  474,  504,

      505,  478,  497,  494,  506,  507,  496,  508,  502,  509,
      495,  512,  514,  513,  500,  493,  516,  515,  518,  503,
      519,  499,  517,  521,  522,  523,  504,  505,  509,  513,
      514,  524,  508,  525,  519,  526,  506,  527,  507,  530,
      517,  528,  522,  529,  531,  516,  533,  532,  535,  538,
      518,  537,  536,  539,  540,  541,  542,  545,  548,  549,
      544,  550,  551,  524,  552,  512,  557,  521,  536,  558,
      535,  556,  560,  561,  570,  545,  564,  565,  542,  567,
      538,  540,  552,  541,  563,  568,  539,  526,  558,  528,
      523,  529,  544,  530,  525,  565,  527,  572,  531,  532,

      569,  537,  533,  568,  556,  571,  563,  573,  574,  575,
      576,  561,  551,  577,  578,  579,  582,  583,  584,  548,
      585,  586,  550,  590,  564,  557,  549,  569,  591,  567,
      571,  595,  592,  560,  593,  570,  594,  596,  597,  573,
      574,  598,  600,  601,  603,  602,  591,  604,  595,  586,
      605,  572,  585,  607,  594,  590,  606,  611,  576,  592,
      612,  577,  593,  614,  616,  601,  603,  617,  618,  619,
      575,  621,  584,  600,  623,  579,  624,  626,  583,  605,
      578,  628,  582,  606,  629,  607,  597,  630,  633,  625,
      611,  634,  635,  637,  638,  614,  596,  602,  628,  640,

      598,  643,  639,  645,  626,  641,  604,  646,  642,  648,
      644,  647,  651,  659,  630,  618,  629,  661,  654,  612,
      660,  637,  623,  641,  663,  616,  617,  625,  619,  639,
      642,  621,  644,  662,  664,  665,  668,  670,  634,  667,
      633,  671,  624,  674,  635,  654,  669,  672,  673,  675,
      638,  640,  676,  660,  677,  645,  664,  678,  682,  681,
      662,  648,  643,  683,  651,  669,  684,  685,  646,  659,
      647,  686,  667,  661,  663,  687,  688,  690,  689,  693,
      691,  695,  675,  698,  701,  699,  702,  704,  674,  685,
      706,  665,  681,  670,  691,  668,  705,  708,  709,  672,

      671,  683,  676,  699,  673,  710,  677,  678,  682,  715,
      714,  713,  712,  711,  707,  703,  700,  697,  684,  695,
      696,  686,  694,  692,  680,  679,  666,  687,  689,  709,
      658,  690,  688,  705,  693,  704,  702,  657,  706,  698,
      701,  656,  655,  653,  652,  650,  649,  708,  636,  632,
      631,  627,  622,  620,  615,  710,  719,  719,  720,  720,
      725,  725,  613,  610,  609,  608,  599,  589,  588,  587,
      581,  580,  566,  562,  559,  555,  554,  553,  547,  546,
      543,  534,  520,  511,  510,  501,  498,  491,  484,  483,
      479,  473,  468,  457,  452,  451,  450,  442,  424,  419,

      413,  407,  405,  404,  403,  394,  389,  384,  369,  365,
      364,  359,  351,  337,  332,  324,  322,  313,  302,  301,
      300,  299,  294,  291,  287,  282,  267,  241,  240,  231,
      208,  200,  192,  173,  162,  158,  157,  153,  152,  151,
      150,  149,  134,  133,  111,   87,   76,   75,   74,   71,
       70,   69,   68,   67,   50,   35,   22,   18,   10,    5,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "asn_lex.l"
#define INITIAL 0
#line 2 "asn_lex.l"

#include <ptlib.h>
#include "main.h"

#include "asn_grammar.h"

#include <cctype>

extern std :: FILE * yyin;

extern unsigned lineNumber;

int LexEcho = FALSE;
#define YY_USER_ACTION if (LexEcho) std :: cout << yytext << std :: flush;


int ReferenceTokenContext = MODULEREFERENCE;
int IdentifierTokenContext = IDENTIFIER;
int BraceTokenContext = '{';
int NullTokenContext = NULL_TYPE;
int InMacroContext = FALSE;
int HasObjectTypeMacro = FALSE;
int InMIBContext = FALSE;
TypesList * CurrentImportList = NULL;

extern "C" int yywrap() { return 1; }

static int TokenSelect(int context, int token1, int token2)
{
  if (context)
    return token1;
  yylval.sval = new std :: string(yytext);
  return token2;
}

#define YY_NO_UNPUT 1
#define YY_NEVER_INTERACTIVE 1
#define comment_line 1

#line 1082 "asn_lex.cxx"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;

#line 131 "asn_lex.l"


#line 1236 "asn_lex.cxx"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 719 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1461 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 133 "asn_lex.l"
{ return ASSIGNMENT; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 135 "asn_lex.l"
{ return ABSENT; }              
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 136 "asn_lex.l"
{ return ABSTRACT_SYNTAX; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 137 "asn_lex.l"
{ return ALL; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 138 "asn_lex.l"
{ return ANY; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 139 "asn_lex.l"
{ return APPLICATION; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 140 "asn_lex.l"
{ return AUTOMATIC; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 141 "asn_lex.l"
{ return BEGIN_t; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 142 "asn_lex.l"
{ return BIT; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 143 "asn_lex.l"
{ return BMPString; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 144 "asn_lex.l"
{ return BOOLEAN_t; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 145 "asn_lex.l"
{ return BY; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 146 "asn_lex.l"
{ return CHARACTER; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 147 "asn_lex.l"
{ return CHOICE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 148 "asn_lex.l"
{ return CLASS; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 149 "asn_lex.l"
{ return COMPONENT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 150 "asn_lex.l"
{ return COMPONENTS; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 151 "asn_lex.l"
{ return CONSTRAINED; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 152 "asn_lex.l"
{ return DEFAULT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 153 "asn_lex.l"
{ return DEFINED; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 154 "asn_lex.l"
{ return DEFINITIONS; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 155 "asn_lex.l"
{ return EMBEDDED; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 156 "asn_lex.l"
{ return END; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 157 "asn_lex.l"
{ return ENUMERATED; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 158 "asn_lex.l"
{ return EXCEPT; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 159 "asn_lex.l"
{ return EXPLICIT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 160 "asn_lex.l"
{ return EXPORTS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 161 "asn_lex.l"
{ return EXTERNAL; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 162 "asn_lex.l"
{ return FALSE_t; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 163 "asn_lex.l"
{ return FROM; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 164 "asn_lex.l"
{ return GeneralizedTime; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 165 "asn_lex.l"
{ return GeneralString; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 166 "asn_lex.l"
{ return GraphicString; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 167 "asn_lex.l"
{ return IA5String; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 168 "asn_lex.l"
{ return TYPE_IDENTIFIER; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 169 "asn_lex.l"
{ return IDENTIFIER_t; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 170 "asn_lex.l"
{ return IMPLICIT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 171 "asn_lex.l"
{ return IMPORTS; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 172 "asn_lex.l"
{ return INCLUDES; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 173 "asn_lex.l"
{ return INSTANCE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 174 "asn_lex.l"
{ return INTEGER_t; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 175 "asn_lex.l"
{ return INTERSECTION; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 176 "asn_lex.l"
{ return ISO646String; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 177 "asn_lex.l"
{ return MACRO; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 178 "asn_lex.l"
{ return MAX_t; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 179 "asn_lex.l"
{ return MIN_t; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 180 "asn_lex.l"
{ return MINUS_INFINITY; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 181 "asn_lex.l"
{ return NOTATION; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 182 "asn_lex.l"
{ return NullTokenContext; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 183 "asn_lex.l"
{ return NumericString; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 184 "asn_lex.l"
{ return OBJECT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 185 "asn_lex.l"
{ return OCTET; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 186 "asn_lex.l"
{ return OF_t; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 187 "asn_lex.l"
{ return OPTIONAL_t; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 188 "asn_lex.l"
{ return PDV; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 189 "asn_lex.l"
{ return PLUS_INFINITY; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 190 "asn_lex.l"
{ return PRESENT; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 191 "asn_lex.l"
{ return PrintableString; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 192 "asn_lex.l"
{ return PRIVATE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 193 "asn_lex.l"
{ return REAL; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 194 "asn_lex.l"
{ return SEQUENCE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 195 "asn_lex.l"
{ return SET; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 196 "asn_lex.l"
{ return SIZE_t; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 197 "asn_lex.l"
{ return STRING; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 198 "asn_lex.l"
{ return SYNTAX; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 199 "asn_lex.l"
{ return T61String; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 200 "asn_lex.l"
{ return TAGS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 201 "asn_lex.l"
{ return TeletexString; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 202 "asn_lex.l"
{ return TRUE_t; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 203 "asn_lex.l"
{ return TYPE_t; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 204 "asn_lex.l"
{ return UNION; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 205 "asn_lex.l"
{ return UNIQUE; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 206 "asn_lex.l"
{ return UNIVERSAL; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 207 "asn_lex.l"
{ return UniversalString; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 208 "asn_lex.l"
{ return UTCTime; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 209 "asn_lex.l"
{ return VALUE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 210 "asn_lex.l"
{ return VideotexString; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 211 "asn_lex.l"
{ return VisibleString; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 212 "asn_lex.l"
{ return WITH; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 213 "asn_lex.l"
{ return TokenSelect(InMacroContext, string_t, IDENTIFIER); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 214 "asn_lex.l"
{ return TokenSelect(InMacroContext, identifier_t, IDENTIFIER); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 215 "asn_lex.l"
{ return TokenSelect(InMacroContext, number_t, IDENTIFIER); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 216 "asn_lex.l"
{ return TokenSelect(InMacroContext, empty_t, IDENTIFIER); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 217 "asn_lex.l"
{ return TokenSelect(InMacroContext, type_t, IDENTIFIER); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 218 "asn_lex.l"
{ return TokenSelect(InMacroContext, value_t, IDENTIFIER); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 219 "asn_lex.l"
{ return TokenSelect(HasObjectTypeMacro, OBJECT_TYPE, ReferenceTokenContext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 220 "asn_lex.l"
{ return TokenSelect(HasObjectTypeMacro, TRAP_TYPE, ReferenceTokenContext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 221 "asn_lex.l"
{ return TokenSelect(InMIBContext, ACCESS, ReferenceTokenContext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 222 "asn_lex.l"
{ return TokenSelect(InMIBContext, STATUS, ReferenceTokenContext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 223 "asn_lex.l"
{ return TokenSelect(InMIBContext, read_only_t, IDENTIFIER); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 224 "asn_lex.l"
{ return TokenSelect(InMIBContext, read_write_t, IDENTIFIER); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 225 "asn_lex.l"
{ return TokenSelect(InMIBContext, write_only_t, IDENTIFIER); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 226 "asn_lex.l"
{ return TokenSelect(InMIBContext, not_accessible_t, IDENTIFIER); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 227 "asn_lex.l"
{ return TokenSelect(InMIBContext, mandatory_t, IDENTIFIER); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 228 "asn_lex.l"
{ return TokenSelect(InMIBContext, optional_t, IDENTIFIER); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 229 "asn_lex.l"
{ return TokenSelect(InMIBContext, obsolete_t, IDENTIFIER); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 230 "asn_lex.l"
{ return TokenSelect(InMIBContext, deprecated_t, IDENTIFIER); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 231 "asn_lex.l"
{ return TokenSelect(InMIBContext, DESCRIPTION_t, ReferenceTokenContext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 232 "asn_lex.l"
{ return TokenSelect(InMIBContext, REFERENCE_t, ReferenceTokenContext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 233 "asn_lex.l"
{ return TokenSelect(InMIBContext, INDEX_t, ReferenceTokenContext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 234 "asn_lex.l"
{ return TokenSelect(InMIBContext, DEFVAL_t, ReferenceTokenContext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 235 "asn_lex.l"
{ return TokenSelect(InMIBContext, ENTERPRISE, ReferenceTokenContext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 236 "asn_lex.l"
{ return TokenSelect(InMIBContext, VARIABLES, ReferenceTokenContext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 240 "asn_lex.l"
{
    BEGIN(comment_line);
  }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 244 "asn_lex.l"
{
    BEGIN(INITIAL);
  }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 248 "asn_lex.l"
{
    lineNumber++;
    BEGIN(INITIAL);
  }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 253 "asn_lex.l"
{
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 257 "asn_lex.l"
{ return '@'; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 259 "asn_lex.l"
{ return BraceTokenContext; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 261 "asn_lex.l"
{ return '}'; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 263 "asn_lex.l"
{ return '['; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 265 "asn_lex.l"
{ return ']'; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 267 "asn_lex.l"
{ return '('; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 269 "asn_lex.l"
{ return ')'; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 271 "asn_lex.l"
{ return '<'; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 273 "asn_lex.l"
{ return '>'; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 275 "asn_lex.l"
{ return '|'; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 277 "asn_lex.l"
{ return ';'; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 279 "asn_lex.l"
{ return '+'; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 281 "asn_lex.l"
{ return '-'; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 283 "asn_lex.l"
{ return '*'; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 285 "asn_lex.l"
{ return '/'; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 287 "asn_lex.l"
{ return ','; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 289 "asn_lex.l"
{ return '.'; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 291 "asn_lex.l"
{ return ':'; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 293 "asn_lex.l"
{ return '='; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 295 "asn_lex.l"
{ return '|'; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 297 "asn_lex.l"
{ return '^'; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 299 "asn_lex.l"
{ return '!'; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 301 "asn_lex.l"
{
    std :: string s = yytext;
    std :: size_t pos;
    while ((pos = s.find('\n')) != std :: string :: npos) {
      PINDEX start = pos;
      while (start > 0 && std :: isspace(s[start-1]))
	start--;
      while (std :: isspace(s[pos]))
	pos++;
      s.replace(start, pos - start, " ");
      lineNumber++;
    }
    yylval.sval = new std :: string(s);
    return CSTRING;
  }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 317 "asn_lex.l"
{
    const char * ptr = yytext;
    yylval.ival = 0;
    while (*ptr != '\0')
      yylval.ival = yylval.ival * 10 + *ptr++ - '0';
    return INTEGER;
  }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 325 "asn_lex.l"
{
    yylval.sval = new std :: string(yytext);
    if (CurrentImportList != NULL) {
      ImportedType searchArg(new std :: string(yytext), FALSE);
      if (CurrentImportList->GetValuesIndex(searchArg) != P_MAX_INDEX)
        return IMPORT_IDENTIFIER;
    }
    return IdentifierTokenContext;
  }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 335 "asn_lex.l"
{   /* See X.681 section 7.5 */
    yylval.sval = new std :: string(yytext);
    return VALUEFIELDREFERENCE;
  }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 340 "asn_lex.l"
{	  /* See X.681 section 7.4 */
    yylval.sval = new std :: string(yytext);
    return TYPEFIELDREFERENCE;
  }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 345 "asn_lex.l"
{	  /* See X.680 section 9.2 */
    yylval.sval = new std :: string(yytext);
    if (CurrentImportList != NULL &&
	CurrentImportList->GetValuesIndex(SearchType(*yylval.sval)) != P_MAX_INDEX)
      return IMPORT_IDENTIFIER;
    return ReferenceTokenContext;
  }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 353 "asn_lex.l"
{ }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 355 "asn_lex.l"
{
    lineNumber++;
  }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 359 "asn_lex.l"
{ PError << StdError(Fatal) << "unknown token " << yytext << endl; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 362 "asn_lex.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2064 "asn_lex.cxx"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment_line):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

#ifdef YY_USE_PROTOS
static int yy_get_next_buffer(void)
#else
static int yy_get_next_buffer()
#endif
	{
	char *dest = yy_current_buffer->yy_ch_buf;
	char *source = yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, (size_t)num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

#ifdef YY_USE_PROTOS
static yy_state_type yy_get_previous_state(void)
#else
static yy_state_type yy_get_previous_state()
#endif
	{
	yy_state_type yy_current_state;
	char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 719 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	int yy_is_jam;
	char *yy_cp = yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 719 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 718);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
char *yy_bp;
#endif
	{
	char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yy_n_chars + 2;
		char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
#ifdef YY_USE_PROTOS
static int input(void)
#else
static int input()
#endif
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif	/* ifndef YY_NO_INPUT */


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
#ifdef YY_USE_PROTOS
static void yy_pop_state(void)
#else
static void yy_pop_state()
#endif
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
#ifdef YY_USE_PROTOS
static int yy_top_state(void)
#else
static int yy_top_state()
#endif
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 362 "asn_lex.l"

/* End PR_LEX.L */
